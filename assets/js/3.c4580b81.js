(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{164:function(t,s,a){"use strict";a.r(s);var n=a(0),_=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),a("p",[t._v("C 程序是包含"),a("a",{attrs:{href:"#%E5%A3%B0%E6%98%8E"}},[t._v("声明")]),t._v("的一系列文本文件（通常是"),a("a",{attrs:{href:""}},[t._v("头文件")]),t._v("和"),a("a",{attrs:{href:""}},[t._v("源文件")]),t._v("）。")]),t._v(" "),a("p",[t._v("它们会经过"),a("a",{attrs:{href:""}},[t._v("翻译")]),t._v("变成可执行程序，在操作系统调用其"),a("a",{attrs:{href:""}},[t._v("主函数")]),t._v("时被执行（除非它自己就是 OS 程序或其他独立程序，这种情况下"),a("a",{attrs:{href:""}},[t._v("入口点")]),t._v("是"),a("a",{attrs:{href:""}},[t._v("编译器")]),t._v("决定的）。")]),t._v(" "),a("p",[t._v("某些词在 C 程序中拥有特别含义，它们是"),a("a",{attrs:{href:""}},[t._v("关键词")]),t._v("。其他词可用做"),a("a",{attrs:{href:""}},[t._v("标识符")]),t._v("，可用于标识"),a("a",{attrs:{href:""}},[t._v("对象")]),t._v("、"),a("a",{attrs:{href:""}},[t._v("函数")]),t._v("、"),a("a",{attrs:{href:""}},[t._v("结构体")]),t._v("、"),a("a",{attrs:{href:""}},[t._v("联合体")]),t._v("、或"),a("a",{attrs:{href:""}},[t._v("枚举标签")]),t._v("、"),a("a",{attrs:{href:""}},[t._v("枚举成员")]),t._v("、 "),a("a",{attrs:{href:""}},[t._v("typedef 类型别名")]),t._v("、"),a("a",{attrs:{href:""}},[t._v("标号")]),t._v("或"),a("a",{attrs:{href:""}},[t._v("宏")]),t._v("。")]),t._v(" "),a("p",[t._v("每个标识符（除了宏）仅在程序的一部分中合法，这部分被称为"),a("a",{attrs:{href:""}},[t._v("作用域")]),t._v("，而它们属于"),a("a",{attrs:{href:""}},[t._v("四种命名空间")]),t._v("之一。一些标识符拥有链接，这会令它们出现于不同作用域或翻译单元时，指代同一实体。")]),t._v(" "),a("p",[a("a",{attrs:{href:""}},[t._v("函数")]),t._v("的定义包含一系列"),a("a",{attrs:{href:""}},[t._v("语句")]),t._v("和声明，其中有的包含"),a("a",{attrs:{href:""}},[t._v("表达式")]),t._v("，它指定程序要进行的计算。")]),t._v(" "),a("p",[t._v("声明和表达式创建、销毁、访问并操作对象。C中每个对象、函数及表达式关联到一种类型。")]),t._v(" "),a("h2",{attrs:{id:"_1、声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、声明","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、声明")]),t._v(" "),a("p",[a("code",[t._v("声明")]),t._v("是一个 C 语言构造，使用声明可以引入一个或多个"),a("a",{attrs:{href:""}},[t._v("标识符")]),t._v("到程序中，并指定其含义和属性。")]),t._v(" "),a("p",[t._v("声明可以出现在任何"),a("a",{attrs:{href:""}},[t._v("作用域")]),t._v("中。")]),t._v(" "),a("p",[t._v("每个声明"),a("strong",[t._v("以"),a("code",[t._v(";")]),t._v("结束")]),t._v("（类似语句），并由两个独立部分组成：")]),t._v(" "),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("类型限定符"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("类型指定符"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("声明器"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("初始化器"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" specifiers"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("and"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("qualifiers declarators"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("and"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("initializers"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_1-1、-类型限定符-类型指定符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、-类型限定符-类型指定符","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.1、[类型限定符]-[类型指定符]")]),t._v(" "),a("p",[t._v("它是一个列表，每个符号之间使用空白符分隔：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("类型指定符")]),t._v("：\n"),a("ul",[a("li",[a("a",{attrs:{href:""}},[t._v("void")]),t._v("(空类型)")]),t._v(" "),a("li",[a("a",{attrs:{href:""}},[t._v("算术类型")]),t._v("名称")]),t._v(" "),a("li",[a("a",{attrs:{href:""}},[t._v("原子类型")]),t._v("名称")]),t._v(" "),a("li",[t._v("先前由 "),a("a",{attrs:{href:""}},[t._v("typedef")]),t._v(" 声明引入的名称")]),t._v(" "),a("li",[a("a",{attrs:{href:""}},[t._v("struct")]),t._v(" 、 "),a("a",{attrs:{href:""}},[t._v("union")]),t._v(" 或 "),a("a",{attrs:{href:""}},[t._v("enum")]),t._v(" 指定符")])])]),t._v(" "),a("li",[t._v("0 or 1 个"),a("code",[t._v("存储类指定符")]),t._v("： "),a("a",{attrs:{href:""}},[t._v("typedef")]),t._v(" 、 "),a("a",{attrs:{href:""}},[t._v("auto")]),t._v(" 、 "),a("a",{attrs:{href:""}},[t._v("register")]),t._v(" 、 "),a("a",{attrs:{href:""}},[t._v("static")]),t._v(" 、 "),a("a",{attrs:{href:""}},[t._v("extern")]),t._v("、 "),a("a",{attrs:{href:""}},[t._v("_Thread_local")])]),t._v(" "),a("li",[t._v("0 or 多个"),a("code",[t._v("类型限定符")]),t._v("： "),a("a",{attrs:{href:""}},[t._v("const")]),t._v(" 、 "),a("a",{attrs:{href:""}},[t._v("volatile")]),t._v("、 "),a("a",{attrs:{href:""}},[t._v("restrict")]),t._v("、 "),a("a",{attrs:{href:""}},[t._v("_Atomic")])]),t._v(" "),a("li",[t._v("0 or 多个"),a("code",[t._v("函数指定符")]),t._v("（只在声明函数时）： "),a("a",{attrs:{href:""}},[t._v("inline")]),t._v(" 、 "),a("a",{attrs:{href:""}},[t._v("_Noreturn")])]),t._v(" "),a("li",[t._v("零或多个对齐指定符： "),a("a",{attrs:{href:""}},[t._v("_Alignas")])])]),t._v(" "),a("h3",{attrs:{id:"_1-2、-声明器-初始化器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、-声明器-初始化器","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.2、[声明器]-[初始化器]")]),t._v(" "),a("p",[a("code",[t._v("声明器")]),t._v("的逗号分隔列表（每个声明器提供附加类型信息及/或要声明的标识符）+ 可选的初始化器。")]),t._v(" "),a("p",[t._v("声明器可伴随"),a("code",[t._v("初始化器")]),t._v("。")]),t._v(" "),a("p",[a("a",{attrs:{href:""}},[t._v("enum")]),t._v(" 、 "),a("a",{attrs:{href:""}},[t._v("struct")]),t._v(" 和 "),a("a",{attrs:{href:""}},[t._v("union")]),t._v(" 声明可忽略声明器，这种情况下它们仅引入枚举常量和/或标签。")]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("b"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// int 是类型指定符，")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("// a 是声明器")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("// *b 是声明器")]),t._v("\n                "),a("span",{attrs:{class:"token comment"}},[t._v("// NULL 是初始化器")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token function"}},[t._v("f")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// const 是类型限定符")]),t._v("\n                    "),a("span",{attrs:{class:"token comment"}},[t._v("// int 是类型指定符")]),t._v("\n                    "),a("span",{attrs:{class:"token comment"}},[t._v("// *f(void) 是声明器")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" COLOR "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("RED"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GREEN"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BLUE"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" c"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// enum COLOR {RED, GREEN, BLUE} 是类型指定符")]),t._v("\n                                 "),a("span",{attrs:{class:"token comment"}},[t._v("// c 是声明器")]),t._v("\n")])])]),a("p",[t._v("一个声明引入的每个标识符类型是通过"),a("code",[t._v("类型指定符")]),t._v("所指定的类型及其"),a("code",[t._v("声明器")]),t._v("所应用的类型修饰决定的。")]),t._v(" "),a("h4",{attrs:{id:"_1-2-1、声明器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1、声明器","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.2.1、声明器")]),t._v(" "),a("p",[t._v("每个声明器是下列之一：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("标识符")])]),t._v(" "),a("li",[a("code",[t._v("(声明器)")]),t._v("，用括号包裹的声明器，当引入指向"),a("a",{attrs:{href:""}},[t._v("数组")]),t._v("或指向"),a("a",{attrs:{href:""}},[t._v("函数")]),t._v("的"),a("a",{attrs:{href:""}},[t._v("指针")]),t._v("时要求这么做")]),t._v(" "),a("li",[t._v("指针声明器，"),a("code",[t._v("类型指定符 * 声明器")]),t._v("，类型限定符是可选的。")]),t._v(" "),a("li",[t._v("数组声明器，"),a("code",[t._v("非无括号指针声明器 [static 类型指定符 表达式]")]),t._v("，或 "),a("code",[t._v("非括号声明器 [类型指定符 *]")]),t._v("，"),a("code",[t._v("static")]),t._v("和类型指定符是可选的")]),t._v(" "),a("li",[t._v("函数声明器，"),a("code",[t._v("非无括号指针声明器 (参数或标识符)")])])]),t._v(" "),a("p",[t._v("此语法背后的原因，是当声明器所声明的标识符以与声明器相同的形式出现在表达式中时，它会拥有类型指定符序列所指定的类型。")]),t._v(" "),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" C "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" member"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// int 是类型指定符，member 是声明器")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("pObj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// struct C { int member; } 是类型指定符")]),t._v("\n                     "),a("span",{attrs:{class:"token comment"}},[t._v("// obj 是声明器，定义 struct C 类型的对象")]),t._v("\n                     "),a("span",{attrs:{class:"token comment"}},[t._v("// *pObj 是声明器，声明指向 struct C 的指针，")]),t._v("\n                     "),a("span",{attrs:{class:"token comment"}},[t._v("// = &obj 是初始化器，提供该指针的初值")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("f")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("pf"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("double")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 类型指定符是 int")]),t._v("\n                                              "),a("span",{attrs:{class:"token comment"}},[t._v("// 声明器 a 定义一个 int 类型对象")]),t._v("\n                                              "),a("span",{attrs:{class:"token comment"}},[t._v("// 初始化器 =1 提供其初值")]),t._v("\n                                              "),a("span",{attrs:{class:"token comment"}},[t._v("// 声明器 *p 定义一个指向 int 指针类型的对象")]),t._v("\n                                              "),a("span",{attrs:{class:"token comment"}},[t._v("// 初始化器 =NULL 提供其初值")]),t._v("\n                                              "),a("span",{attrs:{class:"token comment"}},[t._v("// 声明器 f(void) 声明接受 void 并返回 int 的函数")]),t._v("\n                                              "),a("span",{attrs:{class:"token comment"}},[t._v("// 声明器 (*pf)(double) 定义一个指向")]),t._v("\n                                              "),a("span",{attrs:{class:"token comment"}},[t._v("// 接受 double 并返回 int 的函数的指针类型对象")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("foo"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("double")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 类型指定符是 int")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 1. 声明器 (*(*foo)(double))[3] 是数组声明器：")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    所声明类型是 3 个 int 的数组的 /嵌套声明器/")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 2. 嵌套声明器是 *(*foo)(double)) ，是指针声明器")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    所声明类型是 /嵌套声明器/ 指向 3 个 int 的数组的指针")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 3. 嵌套声明器是 (*foo)(double) ，是一个函数声明器")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    所声明类型是 /嵌套声明器/ 接受 double 并返回指向 3 个 int 的数组的指针的函数")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 4. 嵌套声明器是 (*foo) ，是一个（有括号，函数声明器所要求）指针声明器。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    所声明类型是 /嵌套声明器/ 指向接受 double 并返回指向 3 个 int 的数组的指针的函数的指针")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 5. 嵌套声明器是 foo ”，是一个标识符。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 该声明引入一个标识符 foo ，以指代一个对象，其类型为指向接受 double 并返回指向 3 个 int 的数组的指针的函数的指针")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 初始化器 = NULL 提供此指针的初值。")]),t._v("\n \n"),a("span",{attrs:{class:"token comment"}},[t._v("// 若在用于声明符形式的表达式使用 foo ，则表达式类型将是 int。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("foo"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1.2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("每个不属于其他声明器一部分的声明器结尾是一个"),a("a",{attrs:{href:""}},[t._v("顺序点")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"_2、定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、定义","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、定义")]),t._v(" "),a("p",[t._v("定义是一个提供所有关于其所声明标识符信息的声明。")]),t._v(" "),a("p",[t._v("每个 "),a("code",[t._v("enum")]),t._v(" 或 "),a("code",[t._v("typedef")]),t._v(" 声明都是定义。")]),t._v(" "),a("p",[t._v("对于函数，包含函数体的声明即是函数定义：")]),t._v(" "),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("foo")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("double")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 声明")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("foo")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("double")]),t._v(" x"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 定义")]),t._v("\n")])])]),a("p",[t._v("对于对象，分配其存储的声明（自动或静态，但、非 extern ）即是定义，而一个不分配存储的声明（外部声明）不是。")]),t._v(" "),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 声明")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 定义")]),t._v("\n")])])]),a("p",[t._v("对于结构体和联合体，指定其成员列表的声明是定义：")]),t._v(" "),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" X"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 声明")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" X "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 定义")]),t._v("\n")])])]),a("h2",{attrs:{id:"_3、重声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、重声明","aria-hidden":"true"}},[t._v("#")]),t._v(" 3、重声明")]),t._v(" "),a("p",[t._v("若另一个同一标识符的声明在同一"),a("a",{attrs:{href:""}},[t._v("作用域")]),t._v("的较早部分出现，则声明不可再引入同一标识符，除非")]),t._v(" "),a("p",[a("a",{attrs:{href:""}},[t._v("有链接")]),t._v("对象（外部或内部）的声明可以重复：")]),t._v(" "),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// OK")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// OK")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// OK")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// OK")]),t._v("\n")])])]),a("p",[t._v("非 VLA typedef 可以任意重复，只要它命名同一类型：")]),t._v(" "),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" int_t"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" int_t"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// OK")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" 和 "),a("span",{attrs:{class:"token keyword"}},[t._v("union")]),t._v(" 声明可以重复：\n"),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" X"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" X "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" X"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这些规则会简化头文件的使用。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("注意")])])]),t._v(" "),a("blockquote",[a("p",[t._v("C89 中，任何"),a("a",{attrs:{href:""}},[t._v("复合语句")]),t._v("（块作用域）中的声明必须出现在块的开头，在任何"),a("a",{attrs:{href:""}},[t._v("语句")]),t._v("之前。"),a("br"),t._v("\n而且，C89 中返回 "),a("a",{attrs:{href:""}},[t._v("int")]),t._v(" 的函数可以隐式地用"),a("a",{attrs:{href:""}},[t._v("函数调用运算符")]),t._v("声明，且使用旧式"),a("a",{attrs:{href:""}},[t._v("函数定义")]),t._v("时， "),a("a",{attrs:{href:""}},[t._v("int")]),t._v(" 类型的函数参数不必声明。(C99 前)")])]),t._v(" "),a("p",[t._v("禁止空声明器；声明必须是一个 "),a("a",{attrs:{href:""}},[t._v("_Static_assert")]),t._v(" 声明或 ("),a("strong",[t._v("C11 起")]),t._v(")拥有至少一个声明器，或声明至少一个 struct/union/enum 标签，或引入至少一个枚举常量。")]),t._v(" "),a("blockquote",[a("p",[t._v("若声明器的任一部分是 "),a("a",{attrs:{href:""}},[t._v("VLA")]),t._v(" 数组声明器，则整个声明器的类型被称作“可变修改类型”。根据可变修改类型定义的类型同样是可变修改的（ VM ）。"),a("br"),t._v("\n任何可变修改类型声明只允许出现在"),a("a",{attrs:{href:""}},[t._v("块作用域")]),t._v("或函数原型作用域，而且不能是任何结构体或联合体的成员。尽管 "),a("a",{attrs:{href:""}},[t._v("VLA")]),t._v(" 只能拥有自动"),a("a",{attrs:{href:""}},[t._v("存储期")]),t._v("，一个 VM 类型，例如指向 VLA 的指针也可以有静态存储。关于 VM 类型有其他使用限制，见 "),a("a",{attrs:{href:""}},[t._v("goto")]),t._v(" 、 "),a("a",{attrs:{href:""}},[t._v("switch")]),t._v(" 、 "),a("a",{attrs:{href:""}},[t._v("longjmp")]),t._v(" 。("),a("strong",[t._v("C99 起")]),t._v(")")])]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:""}},[t._v("_Static_assert")]),t._v(" 从 C 文法的视角来看，被认为是声明（故它们可以出现在任何声明能出现的地方），但它们不会引入任何新的标识符，且不遵循声明语法。("),a("strong",[t._v("C11 起")]),t._v(")")])])])}],!1,null,null,null);_.options.__file="1.md";s.default=_.exports}}]);